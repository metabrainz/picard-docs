# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Bob Swift
# This file is distributed under the same license as the MusicBrainz Picard package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MusicBrainz Picard \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-05 11:48-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/technical/plugins_api.rst:10
msgid "Plugins API"
msgstr ""

#: ../../source/technical/plugins_api.rst:13
msgid "Plugin Metadata"
msgstr ""

#: ../../source/technical/plugins_api.rst:15
msgid "Each plugin must provide some metadata as variables. Those variables should be placed at the top of the file."
msgstr ""

#: ../../source/technical/plugins_api.rst:27
msgid "Variables explanation:"
msgstr ""

#: ../../source/technical/plugins_api.rst:29
msgid "**PLUGIN_DESCRIPTION** should be as simple as possible, while still describing the main function."
msgstr ""

#: ../../source/technical/plugins_api.rst:31
msgid "**PLUGIN_VERSION** should be filled with the version of Plugin."
msgstr ""

#: ../../source/technical/plugins_api.rst:33
msgid "**PLUGIN_API_VERSIONS** should be set to the versions of Picard this plugin to run with. New Picard versions will usually support older plugin API versions, but on breaking changes support for older plugin versions can be dropped. Versions available for Picard 2 are \"2.0\", \"2.1\" and \"2.2\"."
msgstr ""

#: ../../source/technical/plugins_api.rst:37
msgid "**PLUGIN_LICENSE** should be set with the license name of the plugin. If possible use one of the license names from the `SPDX License List <https://spdx.org/licenses/>`_, but you are welcomed to use another licnese if the one you chose is not available in the list."
msgstr ""

#: ../../source/technical/plugins_api.rst:41
msgid "**PLUGIN_LICENSE_URL** should be set to a URL pointing to the full license text."
msgstr ""

#: ../../source/technical/plugins_api.rst:45
msgid "Metadata Processors"
msgstr ""

#: ../../source/technical/plugins_api.rst:47
msgid "MusicBrainz metadata can be post-processed at two levels, album and track. The types of the arguments passed to the processor functions in the following examples are as follows:"
msgstr ""

#: ../../source/technical/plugins_api.rst:50
msgid "**album**: ``picard.album.Album``"
msgstr ""

#: ../../source/technical/plugins_api.rst:51
msgid "**metadata**: ``picard.metadata.Metadata``"
msgstr ""

#: ../../source/technical/plugins_api.rst:52
msgid "**release**: ``dict`` with release data from MusicBrainz JSON web service"
msgstr ""

#: ../../source/technical/plugins_api.rst:53
msgid "**track**: ``dict`` with track data from MusicBrainz JSON web service"
msgstr ""

#: ../../source/technical/plugins_api.rst:57
msgid "Album metadata example:"
msgstr ""

#: ../../source/technical/plugins_api.rst:78
msgid "Track metadata example:"
msgstr ""

#: ../../source/technical/plugins_api.rst:96
msgid "Event Hooks"
msgstr ""

#: ../../source/technical/plugins_api.rst:98
msgid "Plugins can register themselves to listen for different events. Currently the following event hooks are available:"
msgstr ""

#: ../../source/technical/plugins_api.rst:101
msgid "file_post_load_processor(file)"
msgstr ""

#: ../../source/technical/plugins_api.rst:103
msgid "This hook is called after a file has been loaded into Picard. This could for example be used to load additional data for a file. Usage:"
msgstr ""

#: ../../source/technical/plugins_api.rst:117
msgid "file_post_save_processor(file)"
msgstr ""

#: ../../source/technical/plugins_api.rst:119
msgid "This hook is called after a file has been saved. This can for example be used to run additional post-processing on the file or write extra data. Note that the file's metadata is already the newly saved metadata. Usage:"
msgstr ""

#: ../../source/technical/plugins_api.rst:133
msgid "file_post_addition_to_track_processor(track, file)"
msgstr ""

#: ../../source/technical/plugins_api.rst:135
msgid "This hook is called after a file has been added to a track (on the right-hand pane of Picard)."
msgstr ""

#: ../../source/technical/plugins_api.rst:148
msgid "file_post_removal_from_track_processor(track, file)"
msgstr ""

#: ../../source/technical/plugins_api.rst:150
msgid "This hook is called after a file has been removed from a track (on the right-hand pane of Picard)."
msgstr ""

#: ../../source/technical/plugins_api.rst:163
msgid "album_post_removal_processor(album)"
msgstr ""

#: ../../source/technical/plugins_api.rst:165
msgid "This hook is called after an album has been removed from Picard."
msgstr ""

#: ../../source/technical/plugins_api.rst:177
msgid "**Note**: *Event hooks are available since API version 2.2*"
msgstr ""

#: ../../source/technical/plugins_api.rst:181
msgid "File Formats"
msgstr ""

#: ../../source/technical/plugins_api.rst:183
msgid "Plugins can extend Picard with support for additional file formats. See the existing `file format implementations <https://github.com/metabrainz/picard/tree/master/picard/formats>`_ for details on how to implement the ``_load`` and ``_save`` methods. Example:"
msgstr ""

#: ../../source/technical/plugins_api.rst:221
msgid "Tagger Script Functions"
msgstr ""

#: ../../source/technical/plugins_api.rst:223
msgid "To define new tagger script functions use ``register_script_function(function, name=None)`` from the ``picard.script`` module. ``parser`` is an instance of ``picard.script.ScriptParser``, and the rest of the arguments passed to it are the arguments from the function call in the tagger script. Example:"
msgstr ""

#: ../../source/technical/plugins_api.rst:245
msgid "``register_script_function`` supports two optional arguments:"
msgstr ""

#: ../../source/technical/plugins_api.rst:247
msgid "**eval_args**: If this is **False**, the arguments will not be evaluated before being passed to **function**."
msgstr ""

#: ../../source/technical/plugins_api.rst:248
msgid "**check_argcount**: If this is **False** the number of arguments passed to the function will not be verified."
msgstr ""

#: ../../source/technical/plugins_api.rst:250
msgid "The default value for both arguments is **True**."
msgstr ""

#: ../../source/technical/plugins_api.rst:254
msgid "Context Menu Actions"
msgstr ""

#: ../../source/technical/plugins_api.rst:256
msgid "Right-click context menu actions can be added to albums, tracks and files in \"Unmatched Files\", \"Clusters\" and the \"ClusterList\" (parent folder of Clusters). Example:"
msgstr ""

#: ../../source/technical/plugins_api.rst:285
msgid "Use ``register_x_action`` where 'x' is \"*album*\", \"*track*\", \"*file*\", \"*cluster*\" or \"*clusterlist*\"."
msgstr ""
