# SOME DESCRIPTIVE TITLE.
# Copyright (C) This documentation is licensed under CC0 1.0.
# This file is distributed under the same license as the MusicBrainz Picard
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: MusicBrainz Picard v2.6b2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-20 13:44-0600\n"
"PO-Revision-Date: 2021-03-20 13:46-0600\n"
"Last-Translator: Bob Swift <bswift@rsds.ca>\n"
"Language: fr\n"
"Language-Team: \n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 2.4.2\n"

#: ../../tutorials/write_plugin.rst:4
msgid "Writing a :index:`Plugin <plugin; writing>`"
msgstr "Écriture d'un :index:`Plugin <plugin ; écriture>`"

#: ../../tutorials/write_plugin.rst:6
msgid ""
"You have a great idea for extending Picard with a plugin but don't know "
"where to start.  Unfortunately, this is a common problem and prevents "
"far too many of those great ideas from ever seeing the light of day.  "
"Perhaps this tutorial will help get you started in turning your great "
"idea a reality."
msgstr ""
"Vous avez une excellente idée pour étendre Picard avec un plugin mais "
"vous ne savez pas par où commencer.  Malheureusement, c'est un problème "
"courant qui empêche beaucoup trop de ces grandes idées de voir le jour.  "
"Peut-être que ce tutoriel vous aidera à commencer à transformer votre "
"grande idée en réalité."

#: ../../tutorials/write_plugin.rst:10
msgid ""
"Picard plugins are written in Python, so that's the programming language "
"you'll be using.  Please check the `INSTALL.md <https://github.com/"
"metabrainz/picard/blob/master/INSTALL.md>`_ file in the Picard "
"repository on GitHub to see the minimum version requirements. This is "
"Python 3.6 as of the time this tutorial was written.  Also refer to the :"
"doc:`Plugins API <../appendices/plugins_api>` for additional "
"information, including the parameters passed to each of the function "
"types."
msgstr ""
"Les plugins Picard sont écrits en Python, c'est donc le langage de "
"programmation que vous utiliserez.  Veuillez vérifier le fichier "
"`INSTALL.md <https://github.com/metabrainz/picard/blob/master/INSTALL."
"md>`_ dans le dépôt Picard sur GitHub pour voir la version minimale "
"requise. Il s'agit de Python 3.6 au moment où ce tutoriel a été écrit.  "
"Consultez également la :doc:`Plugins API <../appendices/plugins_api>` "
"pour obtenir des informations supplémentaires, notamment les paramètres "
"passés à chacun des types de fonctions."

#: ../../tutorials/write_plugin.rst:16
msgid ""
"For the purpose of this tutorial, we're going to develop a simple plugin "
"to save the argument information provided by Picard to ``track`` and "
"``release`` processing plugins.  This will demonstrate how the "
"information is accessed, and will provide a utility that you might find "
"useful when developing your own plugins.  This is based on the `Data "
"Dumper <https://github.com/rdswift/picard-plugins/tree/2.0_RDS_Plugins/"
"plugins/data_dumper>`_ plugin."
msgstr ""
"Pour les besoins de ce tutoriel, nous allons développer un plugin simple "
"pour sauvegarder les informations sur les arguments fournis par Picard "
"aux plugins de traitement ``track`` et ``release``.  Cela démontrera "
"comment on accède à ces informations, et fournira un utilitaire que vous "
"pourrez trouver utile lorsque vous développerez vos propres plugins.  "
"Ceci est basé sur le plugin `Data Dumper <https://github.com/rdswift/"
"picard-plugins/tree/2.0_RDS_Plugins/plugins/data_dumper>`_."

#: ../../tutorials/write_plugin.rst:21
msgid ""
"The first thing that we'll need to include is the header information "
"that describes the plugin."
msgstr ""
"La première chose que nous devons inclure est l'information d'en-tête "
"qui décrit le plugin."

#: ../../tutorials/write_plugin.rst:33
msgid ""
"Next we list the modules that will be referenced in our code.  In this "
"case, we will be using the ``os`` module to build the output file path, "
"and the ``json`` module to format the argument dictionary text for "
"readability. We will be saving our output file to the base directory "
"used for file naming so we import the ``config`` module from Picard, as "
"well as the ``log`` module so that we can write debug or error messages "
"to Picard's log.  Finally, we import the appropriate processing hooks "
"and plugin priority settings."
msgstr ""
"Ensuite, nous listons les modules qui seront référencés dans notre "
"code.  Dans ce cas, nous utiliserons le module ``os`` pour construire le "
"chemin du fichier de sortie, et le module ``json`` pour formater le "
"texte du dictionnaire d'arguments pour une meilleure lisibilité. Nous "
"enregistrerons notre fichier de sortie dans le répertoire de base "
"utilisé pour le nommage des fichiers. Nous importons donc le module "
"``config`` de Picard, ainsi que le module ``log`` pour pouvoir écrire "
"des messages de débogage ou d'erreur dans le journal de Picard.  Enfin, "
"nous importons les hooks de traitement appropriés et les paramètres de "
"priorité des plugins."

#: ../../tutorials/write_plugin.rst:51
msgid ""
"To ensure maximum compatibility, you should only use standard Python "
"modules, or third-party modules that are already included in Picard.  If "
"you use other modules, then the plugin will not function properly if "
"used on a system that doesn't have the proper version of the module "
"installed or if someone is using an executable version of Picard."
msgstr ""
"Pour assurer une compatibilité maximale, vous ne devez utiliser que des "
"modules Python standard, ou des modules tiers qui sont déjà inclus dans "
"Picard.  Si vous utilisez d'autres modules, alors le plugin ne "
"fonctionnera pas correctement s'il est utilisé sur un système qui n'a "
"pas la bonne version du module installé ou si quelqu'un utilise une "
"version exécutable de Picard."

#: ../../tutorials/write_plugin.rst:55
msgid ""
"Now we can start adding the code that we want Picard to execute. First "
"we'll identify the output file to store the parameter information "
"provided by Picard. This is a file named ``data_dump.txt`` to be stored "
"in the file naming output directory. We find the name of the "
"configuration setting we need, ``move_files_to``, by examining the "
"Picard source code for the corresponding option setting screen. In this "
"case it is `picard/ui/options/renaming.py <https://github.com/metabrainz/"
"picard/blob/master/picard/ui/options/renaming.py#L90>`_."
msgstr ""
"Maintenant nous pouvons commencer à ajouter le code que nous voulons que "
"Picard exécute. Tout d'abord, nous allons identifier le fichier de "
"sortie pour stocker les informations sur les paramètres fournis par "
"Picard. Il s'agit d'un fichier nommé ``data_dump.txt`` qui sera stocké "
"dans le répertoire de sortie du nommage des fichiers. Nous trouvons le "
"nom du paramètre de configuration dont nous avons besoin, "
"``move_files_to``, en examinant le code source de Picard pour l'écran de "
"paramétrage des options correspondant. Dans ce cas, il s'agit de `picard/"
"ui/options/renaming.py <https://github.com/metabrainz/picard/blob/master/"
"picard/ui/options/renaming.py#L90>`_."

#: ../../tutorials/write_plugin.rst:65
msgid ""
"The next part is a function to write a Python object to our output "
"file.  To allow the same function to be used for different situations, "
"we include parameters to identify the type of line (input type), the "
"object to write, and options for writing to JSON format and appending or "
"overwriting an existing output file. In our case, we want to overwrite "
"the file each time a new release is processed, but always append the "
"track information to the file."
msgstr ""
"La partie suivante est une fonction permettant d'écrire un objet Python "
"dans notre fichier de sortie.  Pour permettre à la même fonction d'être "
"utilisée dans différentes situations, nous incluons des paramètres pour "
"identifier le type de ligne (type d'entrée), l'objet à écrire, et des "
"options pour écrire au format JSON et ajouter ou écraser un fichier de "
"sortie existant. Dans notre cas, nous voulons écraser le fichier à "
"chaque fois qu'une nouvelle version est traitée, mais toujours ajouter "
"les informations sur les pistes au fichier."

#: ../../tutorials/write_plugin.rst:70
msgid ""
"We also include error checking to write an entry to the Picard log in "
"the event of an exception."
msgstr ""
"Nous avons également inclus un contrôle d'erreur pour écrire une entrée "
"dans le journal Picard en cas d'exception."

#: ../../tutorials/write_plugin.rst:86
msgid ""
"Now we include the functions to be called when releases and tracks are "
"retrieved by Picard. The release function hook provides three arguments, "
"and the track function hook provides four arguments. The argument types "
"are described in the :doc:`Plugins API <../appendices/plugins_api>` "
"section. The first argument, ``album``, is an object that holds "
"information about the selected album. See the ``Album`` class in the "
"`picard/album.py <https://github.com/metabrainz/picard/blob/master/"
"picard/album.py#L112>`_ file in Picard's source code for more "
"information."
msgstr ""
"Maintenant, nous incluons les fonctions qui seront appelées lorsque les "
"releases et les tracks seront récupérés par Picard. Le hook de la "
"fonction release fournit trois arguments, et le hook de la fonction "
"track fournit quatre arguments. Les types d'arguments sont décrits dans "
"la section :doc:`Plugins API <../appendices/plugins_api>`. Le premier "
"argument, ``album``, est un objet qui contient des informations sur "
"l'album sélectionné. Voir la classe ``Album`` dans le fichier `picard/"
"album.py <https://github.com/metabrainz/picard/blob/master/picard/album."
"py#L112>`_ du code source de Picard pour plus d'informations."

#: ../../tutorials/write_plugin.rst:92
msgid ""
"The second argument, ``metadata``, is an object that holds the tags and "
"variables that Picard has assigned for the current release and track. "
"This is where you can add or edit the tags and variables that Picard "
"makes available to the user for scripts. See the ``Metadata`` class in "
"the `picard/metadata.py <https://github.com/metabrainz/picard/blob/"
"master/picard/metadata.py#L146>`_ file in Picard's source code for more "
"information."
msgstr ""
"Le second argument, ``metadata``, est un objet qui contient les tags et "
"les variables que Picard a assignés pour la version et la piste en "
"cours. C'est ici que vous pouvez ajouter ou modifier les tags et les "
"variables que Picard met à disposition de l'utilisateur pour les "
"scripts. Voir la classe ``Metadata`` dans le fichier `picard/metadata.py "
"<https://github.com/metabrainz/picard/blob/master/picard/metadata."
"py#L146>`_ du code source de Picard pour plus d'informations."

#: ../../tutorials/write_plugin.rst:97
msgid ""
"The ``track`` and ``release`` arguments are Python dictionaries "
"containing the information provided in response to Picard's calls to the "
"MusicBrainz API. The information may differ, depending on the user's :"
"doc:`../config/options_metadata` settings for things like \"*Use release "
"relationships*\" or \"*Use track relationships*\"."
msgstr ""
"Les arguments ``track`` et ``release`' sont des dictionnaires Python "
"contenant les informations fournies en réponse aux appels de Picard à "
"l'API MusicBrainz. Les informations peuvent différer selon les "
"paramètres :doc:`../config/options_metadata` de l'utilisateur pour des "
"choses comme \"*Utiliser les relations de validation*\" ou \"*Utiliser "
"les relations de suivi*\"."

#: ../../tutorials/write_plugin.rst:112
msgid ""
"Finally, we need to register our functions so that they are processed "
"with the appropriate events.  In our case, we set the priority to "
"``HIGH`` so that we output the parameter information as it is received "
"by Picard before any other plugins have an opportunity to modify it."
msgstr ""
"Enfin, nous devons enregistrer nos fonctions afin qu'elles soient "
"traitées avec les événements appropriés.  Dans notre cas, nous mettons "
"la priorité à \"HIGH\" pour que nous puissions sortir les informations "
"des paramètres dès qu'elles sont reçues par Picard avant que d'autres "
"plugins aient l'opportunité de les modifier."

#: ../../tutorials/write_plugin.rst:123
msgid "The complete plugin code file looks something like:"
msgstr ""
"Le fichier de code complet du plugin ressemble à quelque chose comme:"

#: ../../tutorials/write_plugin.rst:171
msgid ""
"That's it for our plugin code. Now we need to package it so that we can "
"install it into Picard.  If we're going to just use it locally for "
"ourself, the easiest way is to just name the file something like :file:"
"`my_plugin.py`.  If there are multiple files, such as plugins that "
"include additional settings screens, then the files should be saved in a "
"directory such as :file:`my_plugin` with the main file named :file:"
"`__init__.py`.  The directory is then archived into a :file:`my_plugin."
"zip` file, with the file name the same as the included directory name. "
"The the contents of the archive would show as something like::"
msgstr ""
"C'est tout pour le code de notre plugin. Maintenant nous devons "
"l'empaqueter afin de pouvoir l'installer dans Picard.  Si nous voulons "
"juste l'utiliser localement pour nous-mêmes, le plus simple est de "
"nommer le fichier comme :file:`my_plugin.py`.  S'il y a plusieurs "
"fichiers, comme des plugins qui incluent des écrans de réglages "
"supplémentaires, alors les fichiers doivent être enregistrés dans un "
"répertoire tel que :file:`my_plugin` avec le fichier principal nommé :"
"file:`__init__.py`.  Le répertoire est ensuite archivé dans un fichier :"
"file:`my_plugin.zip`, dont le nom de fichier est identique au nom du "
"répertoire inclus. Le contenu de l'archive s'affiche comme suit::"

#: ../../tutorials/write_plugin.rst:181
msgid ""
"If you've made it this far, congratulations! You've just created your "
"first Picard plugin. Now you have a starting point for turning that "
"great idea into reality."
msgstr ""
"Si vous êtes arrivé jusqu'ici, félicitations ! Vous venez de créer votre "
"premier plugin Picard. Vous avez maintenant un point de départ pour "
"transformer cette grande idée en réalité."

#: ../../tutorials/write_plugin.rst:186
msgid "Relevant portions of Picard's source code including:"
msgstr "Des portions pertinentes du code source de Picard, y compris:"

#: ../../tutorials/write_plugin.rst:188
msgid ""
"Option settings modules in `picard/ui/options/ <https://github.com/"
"metabrainz/picard/tree/master/picard/ui/options>`_ for names used to "
"access the settings."
msgstr ""
"Modules de paramétrage des options dans `picard/ui/options/ <https://"
"github.com/metabrainz/picard/tree/master/picard/ui/options>`_ pour les "
"noms utilisés pour accéder aux paramètres."

#: ../../tutorials/write_plugin.rst:189
msgid ""
"``Album`` class in the `picard/album.py <https://github.com/metabrainz/"
"picard/blob/master/picard/album.py#L112>`_ file."
msgstr ""
"La classe ``Album`` dans le fichier `picard/album.py <https://github.com/"
"metabrainz/picard/blob/master/picard/album.py#L112>`_."

#: ../../tutorials/write_plugin.rst:190
msgid ""
"``Metadata`` class and metadata processing plugin registration functions "
"in the `picard/metadata.py <https://github.com/metabrainz/picard/blob/"
"master/picard/metadata.py#L146>`_ file."
msgstr ""
"La classe ``Metadata`` et les fonctions d'enregistrement du plugin de "
"traitement des métadonnées dans le fichier `picard/metadata.py <https://"
"github.com/metabrainz/picard/blob/master/picard/metadata.py#L146>`_."

#: ../../tutorials/write_plugin.rst:191
msgid ""
"``PluginPriority`` class in the `picard/plugin.py <https://github.com/"
"metabrainz/picard/blob/master/picard/plugin.py#L217>`_ file."
msgstr ""
"La classe ``PluginPriority`` dans le fichier `picard/plugin.py <https://"
"github.com/metabrainz/picard/blob/master/picard/plugin.py#L217>`_."

#~ msgid ""
#~ "Now we can start on our code that we want to process.  First we'll "
#~ "identify the output file to store the parameter information provided "
#~ "by Picard.  This is a file named ``data_dump.txt`` to be stored in "
#~ "the file naming output directory."
#~ msgstr ""
#~ "Maintenant nous pouvons commencer à travailler sur le code que nous "
#~ "voulons traiter.  Tout d'abord, nous allons identifier le fichier de "
#~ "sortie pour stocker les informations sur les paramètres fournies par "
#~ "Picard.  Il s'agit d'un fichier nommé ``data_dump.txt`` qui sera "
#~ "stocké dans le répertoire de sortie du nom du fichier."
