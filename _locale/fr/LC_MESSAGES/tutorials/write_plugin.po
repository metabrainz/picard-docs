# SOME DESCRIPTIVE TITLE.
# Copyright (C) This documentation is licensed under CC0 1.0.
# This file is distributed under the same license as the MusicBrainz Picard
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: MusicBrainz Picard v2.6b2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-19 17:24-0600\n"
"PO-Revision-Date: 2021-03-19 17:25-0600\n"
"Last-Translator: Bob Swift <bswift@rsds.ca>\n"
"Language: fr\n"
"Language-Team: \n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 2.4.2\n"

#: ../../tutorials/write_plugin.rst:4
msgid "Writing a :index:`Plugin <plugin; writing>`"
msgstr "Écriture d'un :index:`Plugin <plugin ; écriture>`"

#: ../../tutorials/write_plugin.rst:6
msgid ""
"You have a great idea for extending Picard with a plugin but don't know "
"where to start.  Unfortunately, this is a common problem and prevents "
"far too many of those great ideas from ever seeing the light of day.  "
"Perhaps this tutorial will help get you started in turning your great "
"idea a reality."
msgstr ""
"Vous avez une excellente idée pour étendre Picard avec un plugin mais "
"vous ne savez pas par où commencer.  Malheureusement, c'est un problème "
"courant qui empêche beaucoup trop de ces grandes idées de voir le jour.  "
"Peut-être que ce tutoriel vous aidera à commencer à transformer votre "
"grande idée en réalité."

#: ../../tutorials/write_plugin.rst:10
msgid ""
"Picard plugins are written in Python, so that's the language you'll be "
"using.  Please check the `INSTALL.md <https://github.com/metabrainz/"
"picard/blob/master/INSTALL.md>`_ file on the Picard repository on GitHub "
"to see the minimum version requirements.  Also refer to the :doc:"
"`Plugins API <../appendices/plugins_api>` for addition information, "
"including the parameters passed to each of the function types."
msgstr ""
"Les plugins Picard sont écrits en Python, c'est donc le langage que vous "
"utiliserez.  Veuillez consulter le fichier `INSTALL.md <https://github."
"com/metabrainz/picard/blob/master/INSTALL.md>`_ du dépôt Picard sur "
"GitHub pour connaître la version minimale requise.  Référez-vous "
"également à la :doc:`Plugins API <../appendices/plugins_api>` pour des "
"informations supplémentaires, y compris les paramètres passés à chacun "
"des types de fonctions."

#: ../../tutorials/write_plugin.rst:17
msgid ""
"To ensure maximum compatibility, you should only use standard Python "
"modules, or third-party modules that are already included in Picard.  If "
"you use other modules, then the plugin will not function properly if "
"used on a system that doesn't have the proper version of the module "
"installed."
msgstr ""
"Pour assurer une compatibilité maximale, vous ne devez utiliser que des "
"modules Python standard ou des modules tiers déjà inclus dans Picard.  "
"Si vous utilisez d'autres modules, le plugin ne fonctionnera pas "
"correctement s'il est utilisé sur un système qui n'a pas la bonne "
"version du module installé."

#: ../../tutorials/write_plugin.rst:21
msgid ""
"For the purpose of this tutorial, we're going to develop a simple plugin "
"to save the argument information provided by Picard to track and release "
"processing plugins.  This will demonstrate how the information is "
"accessed, and will provide a utility that you might find useful when "
"developing your own plugins.  This is based on the `Data Dumper <https://"
"github.com/rdswift/picard-plugins/tree/2.0_RDS_Plugins/plugins/"
"data_dumper>`_ plugin by Bob Swift (rdswift)."
msgstr ""
"Pour les besoins de ce tutoriel, nous allons développer un plugin simple "
"pour sauvegarder les informations sur les arguments fournies par Picard "
"pour suivre et libérer les plugins de traitement.  Cela démontrera "
"comment on accède à ces informations, et fournira un utilitaire que vous "
"pourriez trouver utile lors du développement de vos propres plugins.  "
"Ceci est basé sur le plugin `Data Dumper <https://github.com/rdswift/"
"picard-plugins/tree/2.0_RDS_Plugins/plugins/data_dumper>`_ de Bob Swift "
"(rdswift)."

#: ../../tutorials/write_plugin.rst:26
msgid ""
"The first thing that we'll need to include is the header information "
"that describes the plugin."
msgstr ""
"La première chose que nous devons inclure est l'information d'en-tête "
"qui décrit le plugin."

#: ../../tutorials/write_plugin.rst:38
msgid ""
"Next we list the modules that will be referenced in our code.  In this "
"case, we will be using the ``os`` module to build the output file path, "
"and the ``json`` module to format the text for readability. We will be "
"saving our output file to the base directory used for file naming so we "
"import the ``config`` module from Picard, as well as the ``log`` module "
"so that we can write debug or error messages to Picard's log.  Finally, "
"we import the appropriate processing hooks and plugin priority settings."
msgstr ""
"Ensuite, nous listons les modules qui seront référencés dans notre "
"code.  Dans ce cas, nous utiliserons le module ``os`` pour construire le "
"chemin du fichier de sortie, et le module ``json`` pour formater le "
"texte afin qu'il soit lisible. Nous enregistrerons notre fichier de "
"sortie dans le répertoire de base utilisé pour le nommage des fichiers. "
"Nous importons donc le module ``config`` de Picard, ainsi que le module "
"``log`` pour pouvoir écrire des messages de débogage ou d'erreur dans le "
"journal de Picard.  Enfin, nous importons les hooks de traitement "
"appropriés et les paramètres de priorité des plugins."

#: ../../tutorials/write_plugin.rst:53
msgid ""
"Now we can start on our code that we want to process.  First we'll "
"identify the output file to store the parameter information provided by "
"Picard.  This is a file named ``data_dump.txt`` to be stored in the file "
"naming output directory."
msgstr ""
"Maintenant nous pouvons commencer à travailler sur le code que nous "
"voulons traiter.  Tout d'abord, nous allons identifier le fichier de "
"sortie pour stocker les informations sur les paramètres fournies par "
"Picard.  Il s'agit d'un fichier nommé ``data_dump.txt`` qui sera stocké "
"dans le répertoire de sortie du nom du fichier."

#: ../../tutorials/write_plugin.rst:61
msgid ""
"The next part is a function to write a Python object to our output "
"file.  To allow the same function to be used for different situations, "
"we include parameters to identify the type of line (input), the object "
"to write, and options for writing to JSON format and appending or "
"overwriting an existing output file.  We also include error checking to "
"write to the Picard log in the event of an exception."
msgstr ""
"La partie suivante est une fonction permettant d'écrire un objet Python "
"dans notre fichier de sortie.  Pour permettre à la même fonction d'être "
"utilisée dans différentes situations, nous incluons des paramètres pour "
"identifier le type de ligne (entrée), l'objet à écrire, et des options "
"pour écrire au format JSON et ajouter ou écraser un fichier de sortie "
"existant.  Nous incluons également un contrôle d'erreur pour écrire dans "
"le journal Picard en cas d'exception."

#: ../../tutorials/write_plugin.rst:80
msgid ""
"Now we include the functions to be called when releases and tracks are "
"retrieved by Picard. The release function hook provides three arguments, "
"and the track function hook provides four arguments.  The argument types "
"are described in the :doc:`Plugins API <../appendices/plugins_api>` "
"section."
msgstr ""
"Maintenant, nous incluons les fonctions qui seront appelées lorsque les "
"releases et les tracks seront récupérés par Picard. Le hook de la "
"fonction release fournit trois arguments, et le hook de la fonction "
"track fournit quatre arguments.  Les types d'arguments sont décrits dans "
"la section :doc:`Plugins API <../appendices/plugins_api>`."

#: ../../tutorials/write_plugin.rst:96
msgid ""
"Finally, we need to register our functions so that they are processed "
"with the appropriate events.  In our case, we set the priority to "
"``HIGH`` so that we output the parameter information as it is received "
"by Picard before any other plugins have an opportunity to modify it."
msgstr ""
"Enfin, nous devons enregistrer nos fonctions afin qu'elles soient "
"traitées avec les événements appropriés.  Dans notre cas, nous mettons "
"la priorité à \"HIGH\" pour que nous puissions sortir les informations "
"des paramètres dès qu'elles sont reçues par Picard avant que d'autres "
"plugins aient l'opportunité de les modifier."

#: ../../tutorials/write_plugin.rst:107
msgid ""
"That's it for our plugin code. Now we need to package it so that we can "
"install it into Picard.  If we're going to just use it locally for "
"ourself, the easiest way is to just name the file something like "
"``my_plugin.py``.  If there are multiple files, such as plugins that "
"include additional settings screens, then the files should be saved in a "
"directory such as ``my_plugin`` with the main file named ``__init__."
"py``.  The directory is then archived into a ``my_plugin.zip`` file, "
"with the file name the same as the included directory name. The the "
"contents of the archive would show as something like::"
msgstr ""
"C'est tout pour le code de notre plugin. Maintenant nous devons "
"l'empaqueter afin de pouvoir l'installer dans Picard.  Si nous ne "
"voulons l'utiliser que localement pour nous-mêmes, le plus simple est de "
"nommer le fichier comme ``mon_plugin.py``.  S'il y a plusieurs fichiers, "
"comme des plugins qui incluent des écrans de réglages supplémentaires, "
"alors les fichiers doivent être enregistrés dans un répertoire tel que "
"``my_plugin`` avec le fichier principal nommé ``__init__.py``.  Le "
"répertoire est ensuite archivé dans un fichier ``my_plugin.zip``, le nom "
"du fichier étant le même que le nom du répertoire inclus. Le contenu de "
"l'archive s'affiche comme suit::"

#: ../../tutorials/write_plugin.rst:117
msgid ""
"If you've made it this far, congratulations! You've just created your "
"first Picard plugin. Now you have a starting point for turning that "
"great idea into reality."
msgstr ""
"Si vous êtes arrivé jusqu'ici, félicitations ! Vous venez de créer votre "
"premier plugin Picard. Vous avez maintenant un point de départ pour "
"transformer cette grande idée en réalité."
