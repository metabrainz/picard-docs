# SOME DESCRIPTIVE TITLE.
# Copyright (C) This documentation is licensed under CC0 1.0.
# This file is distributed under the same license as the MusicBrainz Picard
# package.
# Gabriel Ferreira <gabrielcarvfer@gmail.com>, 2021.
# Bob Swift <bswift@rsds.ca>, 2021.
# eduardofoltran <eduardo@foltran.sampa.br>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: MusicBrainz Picard v2.6.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-14 08:09+0100\n"
"PO-Revision-Date: 2025-08-18 19:36+0000\n"
"Last-Translator: eduardofoltran <eduardo@foltran.sampa.br>\n"
"Language-Team: Portuguese (Brazil) <https://translations.metabrainz.org/"
"projects/picard-docs/tutorialswrite_plugin/pt_BR/>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 5.13\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/write_plugin.rst:4
msgid "Writing a :index:`Plugin <plugin; writing>`"
msgstr "Criando um :index:`Plugin <plugin; writing>`"

#: ../../tutorials/write_plugin.rst:6
msgid ""
"You have a great idea for extending Picard with a plugin but don't know "
"where to start.  Unfortunately, this is a common problem and prevents far "
"too many of those great ideas from ever seeing the light of day.  Perhaps "
"this tutorial will help get you started in turning your great idea a reality."
msgstr ""
"Digamos que você tem uma idéia brilhante de como extender o Picard e poderia "
"fazer isto com um plugin, mas não faz idéia de por onde começar.  "
"Infelizmente este é um problema comum e que impede diversas idéias de "
"acontecerem.  Talvez este tutorial seja capaz de te ajudar a começar a "
"transformar sua idéia em realidade."

#: ../../tutorials/write_plugin.rst:10
#, fuzzy
msgid ""
"Picard plugins are written in Python, so that's the programming language "
"you'll be using.  Please check the `INSTALL.md <https://github.com/"
"metabrainz/picard/blob/master/INSTALL.md>`_ file in the Picard repository on "
"GitHub to see the minimum version requirements. This is Python 3.6 as of the "
"time this tutorial was written.  Also refer to the :doc:`Plugins API </"
"appendices/plugins_api>` for additional information, including the "
"parameters passed to each of the function types."
msgstr ""
"Plugins do Picard são escritos em Python, que você também precisará usar.  "
"Cheque o arquivo `INSTALL.md <https://github.com/metabrainz/picard/blob/"
"master/INSTALL.md>`_ no repositório do Picard hospedado no GitHub para ver a "
"versão mínima dos requisitos dele. O tutorial foi escrito com a versão 3.6 "
"do Python.  Olhe também a seção :doc:`APIs de Plugins <../appendices/"
"plugins_api>` para informações adicionais, incluindo parâmetros passados "
"para cada tipo de funções."

#: ../../tutorials/write_plugin.rst:16
msgid ""
"For the purpose of this tutorial, we're going to develop a simple plugin to "
"save the argument information provided by Picard to ``track`` and "
"``release`` processing plugins.  This will demonstrate how the information "
"is accessed, and will provide a utility that you might find useful when "
"developing your own plugins."
msgstr ""
"Neste tutorial mostraremos o desenvolvimento de um plugin simples que salva "
"os argumentos providos pelo Picard para plugins processando trilhas "
"(``tracks``) e lançamentos (``releases``).  Dessa forma mostraremos como se "
"acessar as informações que deseja processar e utilidades que você pode achar "
"útil durante o desenvolvimento de seus próprios plugins."

#: ../../tutorials/write_plugin.rst:20
msgid ""
"The first thing that we'll need to include is the header information that "
"describes the plugin."
msgstr ""
"A primeira coisa a se fazer é incluir o cabeçalho com informações que "
"descrevem o plugin."

#: ../../tutorials/write_plugin.rst:32
msgid ""
"Next we list the modules that will be referenced in our code.  In this case, "
"we will be using the ``os`` module to build the output file path, and the "
"``json`` module to format the argument dictionary text for readability. We "
"will be saving our output file to the base directory used for file naming so "
"we import the ``config`` module from Picard, as well as the ``log`` module "
"so that we can write debug or error messages to Picard's log.  Finally, we "
"import the appropriate processing hooks and plugin priority settings."
msgstr ""
"Em seguida, nós listamos os módulos referenciados no nosso código.  Neste "
"caso, nós usamos os módulos ``os`` e ``json`` para montar o caminho do "
"arquivo de saída e formatar o dicionário para legibilidade respectivamente. "
"Nós iremos salvar nosso arquivo de saída no diretório base utilizado para "
"renomeação de arquivos, então importamos o módulo ``config`` do Picard, "
"assim como o módulo ``log`` para que possamos escrever mensagens de "
"depuração e erro no arquivo de log do Picard.  Finalmente, importamos "
"funções para registrar ganchos de processamento e configurações de "
"prioridade dos plugins."

#: ../../tutorials/write_plugin.rst:50
msgid ""
"To ensure maximum compatibility, you should only use standard Python "
"modules, or third-party modules that are already included in Picard.  If you "
"use other modules, then the plugin will not function properly if used on a "
"system that doesn't have the proper version of the module installed or if "
"someone is using an executable version of Picard."
msgstr ""
"Para garantir uma maior compatibilidade, tente usar apenas módulos padrão "
"Python ou módulos de terceiros já inclusos no Picard.  Se quiser usar "
"outros, o plugin não funcionará corretamente se utilizado em um sistema sem "
"a versão adequada daquele módulo ou se alguém estiver usando uma versão "
"executável do Picard."

#: ../../tutorials/write_plugin.rst:54
msgid ""
"Now we can start adding the code that we want Picard to execute. First we'll "
"identify the output file to store the parameter information provided by "
"Picard. This is a file named ``data_dump.txt`` to be stored in the file "
"naming output directory. We find the name of the configuration setting we "
"need, ``move_files_to``, by examining the Picard source code for the "
"corresponding option setting screen. In this case it is a TextOption in the "
"``RenamingOptionsPage`` class found in the file `picard/ui/options/renaming."
"py <https://github.com/metabrainz/picard/blob/master/picard/ui/options/"
"renaming.py>`_."
msgstr ""
"Agora podemos adicionar o código que queremos que o Picard execute. Primeiro "
"identificaremos o arquivo de saída que guardará os parâmetros fornecidos "
"pelo Picard. O arquivo será chamado ``data_dump.txt`` e será guardado no "
"diretório de destino do script de renomeação. O diretório pode ser "
"encontrado com o valor da configuração ``move_files_to``, que pode ser "
"encontrado iexaminando o código fonte da tela de configurações "
"correspondente do Picard. Neste caso a existe uma opção de texto "
"(TextOption) na classe ``RenamingOptionsPage`` do arquivo `picard/ui/options/"
"renaming.py <https://github.com/metabrainz/picard/blob/master/picard/ui/"
"options/renaming.py>`_."

#: ../../tutorials/write_plugin.rst:64
msgid ""
"The next part is a function to write a Python object to our output file.  To "
"allow the same function to be used for different situations, we include "
"parameters to identify the type of line (input type), the object to write, "
"and options for writing to JSON format and appending or overwriting an "
"existing output file. In our case, we want to overwrite the file each time a "
"new release is processed, but always append the track information to the "
"file."
msgstr ""
"A próxima etapa é chamar a função que escreve um objeto Python para o nosso "
"arquivo de saída.  Para permitir que a mesma função seja reutilizada em "
"situações diferentes, incluímos os parâmetros que identificam o tipo da "
"linha (tipo de entrada), o objeto a ser escrito, além das opções para "
"escrever em JSON subescrevendo o arquivo de saída ou escrevendo ao seu final "
"(apensar). No nosso caso, queremos sobrescrever o arquivo para cada novo "
"lançamento processado, mas apensar informações das trilhas do lançamento ao "
"documento."

#: ../../tutorials/write_plugin.rst:69
msgid ""
"We also include error checking to write an entry to the Picard log in the "
"event of an exception."
msgstr ""
"Também incluímos uma checagem de erro que escreve uma entrada no log de "
"eventos do Picard em caso de exceção."

#: ../../tutorials/write_plugin.rst:85
#, fuzzy
msgid ""
"Now we include the functions to be called when releases and tracks are "
"retrieved by Picard. The release function hook provides three arguments, and "
"the track function hook provides four arguments. The argument types are "
"described in the :doc:`Plugins API </appendices/plugins_api>` section. The "
"first argument, ``album``, is an object that holds information about the "
"selected album. See the ``Album`` class in the `picard/album.py <https://"
"github.com/metabrainz/picard/blob/master/picard/album.py>`_ file in Picard's "
"source code for more information."
msgstr ""
"Agora incluíremos as funções chamadas quando lançamentos e trilhas forem "
"recuperadas pelo Picard. Para fazer isto registramos as funções com os "
"ganchos de processamento. O gancho para lançamentos provê três argumentos "
"enquanto o de trilhas provê quatro. Os tipos dos argumentos são descritos na "
"seção de :doc:`API de Plugins <../appendices/plugins_api>`. O primeiro "
"algumento, ``album``, é um objeto que contém toda a informação do álbum "
"selecionado. Para mais informações, veja a classe ``Album`` no arquivo "
"`picard/album.py <https://github.com/metabrainz/picard/blob/master/picard/"
"album.py>`_ no código fonte do Picard."

#: ../../tutorials/write_plugin.rst:91
msgid ""
"The second argument, ``metadata``, is an object that holds the tags and "
"variables that Picard has assigned for the current release and track. This "
"is where you can add or edit the tags and variables that Picard makes "
"available to the user for scripts. See the ``Metadata`` class in the `picard/"
"metadata.py <https://github.com/metabrainz/picard/blob/master/picard/"
"metadata.py>`_ file in Picard's source code for more information."
msgstr ""
"O segundo argumento, ``metadata``, é um objeto que contém as etiquetas e "
"variáveis que o Picard recuperou para o lançamento e trilha. É neste objeto "
"em que você pode adicionar ou remover etiquetas e outras variáveis que o "
"Picard disponibiliza para scripts de usuários. Para mais informações, veja a "
"classe ``Metadata`` no arquivo `picard/metadata.py <https://github.com/"
"metabrainz/picard/blob/master/picard/metadata.py>`_ do código fonte do "
"Picard."

#: ../../tutorials/write_plugin.rst:96
#, fuzzy
msgid ""
"The ``track`` and ``release`` arguments are Python dictionaries containing "
"the information provided in response to Picard's calls to the MusicBrainz "
"API. The information may differ, depending on the user's :doc:`/config/"
"options_metadata` settings for things like \"*Use release relationships*\" "
"or \"*Use track relationships*\"."
msgstr ""
"Os argumentos trilha (``track``) e lançamento (``release``) são dicionários "
"Python contendo informações recuperada pelo Picard do servidor MusicBrainz. "
"As informações podem variar dependendo das configurações \"*Usar "
"relacionamentos do lançamento*\" or \"*Usar relacionamentos da trilha*\", "
"disponíveis no menu de opções de metadados :doc:`../config/options_metadata`."

#: ../../tutorials/write_plugin.rst:111
msgid ""
"Finally, we need to register our functions so that they are processed with "
"the appropriate events.  In our case, we set the priority to ``HIGH`` so "
"that we output the parameter information as it is received by Picard before "
"any other plugins have an opportunity to modify it."
msgstr ""
"Finalmente, precisamos registrar nossas funções para que sejam processadas "
"pelos eventos apropriados.  No nosso caso, podemos setar a prioridade do "
"plugin para ALTO (``HIGH``), de maneira que gravemos as informações "
"recebidas pelo Picard antes que outros plugins tenham a oportunidade de "
"alterá-los."

#: ../../tutorials/write_plugin.rst:122
msgid "The complete plugin code file looks something like:"
msgstr "O código completo para o plugin deve se parecer com:"

#: ../../tutorials/write_plugin.rst:170
#, fuzzy
msgid ""
"That's it for our plugin code. Now we need to package it so that we can "
"install it into Picard.  If we're going to just use it locally for ourself, "
"the easiest way is to just name the file something like :file:`my_plugin."
"py`.  If there are multiple files, such as plugins that include additional "
"settings screens, then the files should be saved in a directory such as :"
"file:`my_plugin` with the main file named :file:`__init__.py`.  The "
"directory is then archived into a :file:`my_plugin.zip` file, with the file "
"name the same as the included directory name. The contents of the archive "
"would show as something like::"
msgstr ""
"E é só para o código do nosso plugin. Agora precisamos empacotá-lo para "
"poder instalá-lo no Picard.  Se formos usar apenas localmente, o jeito mais "
"fácil é renomear o arquivo para algo como :file:`meu_plugin.py`.  Se forem "
"múltiplos arquivos, como em plugins com telas adicionais de configuração, os "
"arquivos devem ser salvos numa pasta como :file:`meu_plugin` com o arquivo "
"principal chamado :file:`__init__.py`.  A pasta deve ser comprimida para um "
"arquivo :file:`meu_plugin.zip`, com o mesmo nome da pasta compactada. Os "
"conteúdos do arquivo devem ser algo assim::"

#: ../../tutorials/write_plugin.rst:180
msgid ""
"If you've made it this far, congratulations! You've just created your first "
"Picard plugin. Now you have a starting point for turning that great idea "
"into reality."
msgstr ""
"Se você chegou até aqui, parabéns! Você acabou de criar seu primeiro plugin "
"para o Picard. Agora você tem um ponto de partida para transformar sua idéia "
"em realidade."

#: ../../tutorials/write_plugin.rst:185
msgid "Relevant portions of Picard's source code including:"
msgstr "Porções relevantes do código fonte do Picard incluindo:"

#: ../../tutorials/write_plugin.rst:187
msgid ""
"Option settings modules in `picard/ui/options/ <https://github.com/"
"metabrainz/picard/tree/master/picard/ui/options>`_ for names used to access "
"the settings."
msgstr ""
"Para nomes usados para acessar configurações, módulos de Opções das "
"configurações em `picard/ui/options/ <https://github.com/metabrainz/picard/"
"tree/master/picard/ui/options>`_."

#: ../../tutorials/write_plugin.rst:188
msgid ""
"``Album`` class in the `picard/album.py <https://github.com/metabrainz/"
"picard/blob/master/picard/album.py>`_ file."
msgstr ""
"Classe ``Album`` no arquivo `picard/album.py <https://github.com/metabrainz/"
"picard/blob/master/picard/album.py>`_."

#: ../../tutorials/write_plugin.rst:189
msgid ""
"``Metadata`` class and metadata processing plugin registration functions in "
"the `picard/metadata.py <https://github.com/metabrainz/picard/blob/master/"
"picard/metadata.py>`_ file."
msgstr ""
"Classe ``Metadata`` e funções de registro para processamento de plugins no "
"arquivo `picard/metadata.py <https://github.com/metabrainz/picard/blob/"
"master/picard/metadata.py>`_."

#: ../../tutorials/write_plugin.rst:190
msgid ""
"``PluginPriority`` class in the `picard/plugin.py <https://github.com/"
"metabrainz/picard/blob/master/picard/plugin.py>`_ file."
msgstr ""
"Classe ``PluginPriority`` no arquivo `picard/plugin.py <https://github.com/"
"metabrainz/picard/blob/master/picard/plugin.py>`_."
